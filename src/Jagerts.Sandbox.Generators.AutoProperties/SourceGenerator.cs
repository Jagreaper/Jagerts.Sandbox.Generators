using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
//#if DEBUG
//using System.Diagnostics;
//#endif
using System.Linq;
using System.Text;

namespace Jagerts.Sandbox.Generators.AutoProperties;

[Generator]
public class SourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
//#if DEBUG
//        if (!Debugger.IsAttached)
//            Debugger.Launch();
//#endif
    }

    public void Execute(GeneratorExecutionContext context)
    {
        foreach (var tree in context.Compilation.SyntaxTrees)
        {
            var root = tree.GetRoot();

            string namespaceBody;
            {
                var namespaces = root
                    .DescendantNodes()
                    .Where(node => node.IsKind(SyntaxKind.UsingDirective))
                    .Cast<UsingDirectiveSyntax>();

                StringBuilder namespaceBuilder = new();

                namespaceBuilder.AppendLine("// <auto-generated />");
                namespaceBuilder.AppendLine("#nullable enable");
                namespaceBuilder.AppendLine();

                foreach (var @namespace in namespaces)
                    namespaceBuilder.AppendLine($"using {@namespace.Name};");

                if (namespaceBuilder.Length > 0)
                    namespaceBuilder.AppendLine();

                namespaceBody = namespaceBuilder.ToString();
            }

            var classes = tree
                .GetRoot()
                .DescendantNodesAndSelf()
                .Where(node => node.IsKind(SyntaxKind.ClassDeclaration))
                .Cast<ClassDeclarationSyntax>();

            foreach (var @class in classes)
            {
                if (@class.Parent is BaseNamespaceDeclarationSyntax namespaceDeclarationSyntax)
                {
                    StringBuilder builder = new(namespaceBody);

                    builder.AppendLine($"namespace {namespaceDeclarationSyntax.Name};");
                    builder.AppendLine();

                    builder.AppendLine($"public partial class {@class.Identifier.ValueText}");
                    builder.AppendLine("{");

                    var fields = @class
                        .DescendantNodes()
                        .Where(node => node.IsKind(SyntaxKind.FieldDeclaration))
                        .Cast<FieldDeclarationSyntax>();

                    bool hasAutoProperties = false;
                    foreach (var field in fields)
                    {
                        var attribute = field.AttributeLists
                            .SelectMany(list => list.Attributes)
                            .FirstOrDefault(attribute => attribute.Name.ToString() == "AutoProperty");

                        if (attribute is not null)
                        {
                            if (hasAutoProperties)
                                builder.AppendLine();

                            hasAutoProperties = true;

                            foreach (var variable in field.Declaration.Variables)
                            {
                                var propertyName = variable.Identifier.Text;

                                if (propertyName.StartsWith("_"))
                                    propertyName = propertyName.Substring(1, propertyName.Length - 1);

                                if (propertyName.Length > 0)
                                    propertyName = $"{char.ToUpper(propertyName[0])}{propertyName.Substring(1, propertyName.Length - 1)}";

                                builder.AppendLine($"\tpublic {field.Declaration.Type} {propertyName}");
                                builder.AppendLine("\t{");
                                builder.AppendLine($"\t\tget => this.{variable.Identifier.Text};");
                                builder.AppendLine($"\t\tset => this.{variable.Identifier.Text} = value;");
                                builder.AppendLine("\t}");
                            }
                        }
                    }

                    if (hasAutoProperties)
                    {
                        builder.AppendLine("}");

                        var classBody = builder.ToString();

                        context.AddSource($"{@class.Identifier.Value}.g.cs", classBody);
                    }
                }
            }
        }
    }
}